trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
- group: dev
- name: InfraProvisioningResoureGroupName
  value: $(environment)-provisioning-rg
- name: tfBackendStorageAccountName
  value: $(environment)tfbackendsa
- name: tfBackendStorageContainerName
  value: terraform-backend-files
- name: tfBackendFileName
  value: $(environment)-tf-state-file
- name: tfvarsFile
  value: $(environment).tfvars

steps:
- task: Bash@3
  displayName: 'AZ Login'
  inputs:
    targetType: 'inline'
    script: |
      # Write your commands here
      az login --service-principal -u $(client_id) -p $(client_secret) --tenant $(tenant_id) 
      az account set --subscription "$(subscription)"
      az account list -o table

- task: Bash@3
  displayName: 'Create TF storage account'
  inputs:
    targetType: 'inline'
    script: |
      # Write your commands here
      LOCATION=$(location_name)
      RESOURCE_GROUP_NAME=$(InfraProvisioningResoureGroupName)
      STORAGE_ACCOUNT_NAME=$(tfBackendStorageAccountName)
      CONTAINER_NAME=$(tfBackendStorageContainerName)
      # Create resource group
      az group create --name $RESOURCE_GROUP_NAME --location $LOCATION

      # Create storage account
      az storage account create --resource-group $RESOURCE_GROUP_NAME --name $STORAGE_ACCOUNT_NAME --sku Standard_LRS --encryption-services blob

      # Get storage account key
      ACCOUNT_KEY=$(az storage account keys list --resource-group $RESOURCE_GROUP_NAME --account-name $STORAGE_ACCOUNT_NAME --query [0].value -o tsv)

      # Create blob container
      az storage container create --name $CONTAINER_NAME --account-name $STORAGE_ACCOUNT_NAME --account-key $ACCOUNT_KEY
      
      # 
      echo "##vso[task.setvariable variable=tf-backend-sa-access-key;]$ACCOUNT_KEY"
      echo "storage_account_name: $STORAGE_ACCOUNT_NAME"
      echo "container_name: $CONTAINER_NAME"
      echo "access_key: $ACCOUNT_KEY"

- task: Bash@3
  displayName: 'Create provider'
  inputs:
    workingDirectory: '$(System.DefaultWorkingDirectory)/'
    targetType: 'inline'
    script: |
      # Write your commands here
      
      echo 'Hello sub: $(subscription)'
      cat > provider.tf <<-END-OF-STANZA
      provider "azurerm" {
        subscription_id = "$(subscription)"
        client_id       = "$(client_id)"
        client_secret   = "$(client_secret)"
        tenant_id       = "$(tenant_id)"
      }
      END-OF-STANZA
    
      
    
- task: TerraformInstaller@0
  displayName: install Terraform v0.12.28
  inputs:
    terraformVersion: '0.12.28'

- task: Bash@3
  displayName: 'List working Directory'
  inputs:
    workingDirectory: '$(System.DefaultWorkingDirectory)/'
    targetType: 'inline'
    script: |
      echo "list working directory"
      ls
      cat provider.tf

- task: Bash@3
  displayName: 'Terraform init and Plan'
  inputs:
    workingDirectory: '$(System.DefaultWorkingDirectory)/'
    targetType: 'inline'
    script: |
      echo '#######Terraform Init########'
      terraform init \
      -backend-config="storage_account_name=$(tfBackendStorageAccountName)" \
      -backend-config="container_name=$(tfBackendStorageContainerName)" \
      -backend-config="access_key=$(tf-backend-sa-access-key)" \
      -backend-config="key=$(tfBackendFileName)"
      
      echo '#######Terraform Plan########'
      terraform plan \
      -out="tfplan"

# - task: PowerShell@2
#   displayName: detect any terraform change
#   inputs:
#     workingDirectory: '$(System.DefaultWorkingDirectory)/'
#     targetType: 'inline'
#     script: |
#       # Write-Host "LASTEXITCODE : $LASTEXITCODE"
#       $plan = $(terraform show -json tfplan | ConvertFrom-Json)
#       $actions = $plan.resource_changes.change.actions
#       Write-Host "Terraform actions : $actions"
#       if (($actions -contains 'create') -or ($actions -contains 'delete') -or ($actions -contains 'update'))
#       {
#         Write-Host "Terraform will perform the following actions : $actions"
#         Write-Host "##vso[task.setvariable variable=anyTfChanges;]true"
#       }
#       else
#       {
#         Write-Host "There is no change detected in Terraform tfplan file"
#       }

- task: Bash@3
  displayName: 'Terraform Apply'
  inputs:
    workingDirectory: '$(System.DefaultWorkingDirectory)/'
    targetType: 'inline'
    script: |
      echo '#######Terraform Apply########'
      terraform apply tfplan