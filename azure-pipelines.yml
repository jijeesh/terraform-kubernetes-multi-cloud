# trigger:
# - master

pool:
  vmImage: 'ubuntu-latest'

variables:
- group: dev

steps:
- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      # Write your commands here
      az login --service-principal -u $(client_id) -p $(client_secret) --tenant $(tenant_id) 
      az account set --subscription "$(subscription)"
      az account list -o table
- task: Bash@3
  inputs:
    workingDirectory: '$(System.DefaultWorkingDirectory)/'
    targetType: 'inline'
    script: |
      # Write your commands here
      
      echo 'Hello sub: $(subscription)'
      cat > provider.tf <<-END-OF-STANZA
      provider "azurerm" {
        subscription_id = "$(subscription)"
        client_id       = "$(client_id)"
        client_secret   = "$(client_secret)"
        tenant_id       = "$(tenant_id)"
      }
      END-OF-STANZA
  
  - task: Bash@3
    inputs:
      workingDirectory: '$(System.DefaultWorkingDirectory)/'
      targetType: 'inline'
      script: |
        echo "list working directory"
        ls
# - task: TerraformInstaller@0
#   displayName: install Terraform v0.12.28
#   inputs:
#     terraformVersion: '0.12.28'

# - task: TerraformTaskV1@0
#   displayName: terraform init
#   inputs:
#     provider: 'azurerm'
#     command: 'init'
#     workingDirectory: '$(System.DefaultWorkingDirectory)/'
#     backendServiceArm: '$(subscription)'
#     backendAzureRmResourceGroupName: '$(resourceGroup)'
#     backendAzureRmStorageAccountName: '$(storageAccount)'
#     backendAzureRmContainerName: '$(container)'
#     backendAzureRmKey: '$(tfstateFile)'

# - task: TerraformTaskV1@0
#   displayName: terraform plan -out=tfplan
#   inputs:
#     provider: 'azurerm'
#     command: 'plan'
#     workingDirectory: '$(System.DefaultWorkingDirectory)/'
#     commandOptions: '-out=tfplan'
#     # commandOptions: '-detailed-exitcode -out=tfplan'
#     environmentServiceNameAzureRM: '$(subscription)'

# - task: PowerShell@2
#   displayName: detect any terraform change
#   inputs:
#     workingDirectory: '$(System.DefaultWorkingDirectory)/'
#     targetType: 'inline'
#     script: |
#       # Write-Host "LASTEXITCODE : $LASTEXITCODE"
#       $plan = $(terraform show -json tfplan | ConvertFrom-Json)
#       $actions = $plan.resource_changes.change.actions
#       Write-Host "Terraform actions : $actions"
#       if (($actions -contains 'create') -or ($actions -contains 'delete') -or ($actions -contains 'update'))
#       {
#         Write-Host "Terraform will perform the following actions : $actions"
#         Write-Host "##vso[task.setvariable variable=anyTfChanges;]true"
#       }
#       else
#       {
#         Write-Host "There is no change detected in Terraform tfplan file"
#       }

# - task: TerraformTaskV1@0
#   displayName: terraform apply tfplan
#   condition: eq(variables.anyTfChanges,Â true)
#   inputs:
#     provider: 'azurerm'
#     command: 'apply'
#     workingDirectory: '$(System.DefaultWorkingDirectory)/'
#     commandOptions: 'tfplan'
#     environmentServiceNameAzureRM: '$(subscription)'